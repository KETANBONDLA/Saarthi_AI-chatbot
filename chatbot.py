import streamlit as st
import speech_recognition as sr
import google.generativeai as genai

# ЁЯФС Configure Gemini API key
genai.configure(api_key="Your API key")  #Gemini API key

# ЁЯФН Load Gemini model
model = genai.GenerativeModel("gemini-1.5-pro-001")

# ЁЯза Ask Gemini model your agriculture question
def ask_gemini(question):
    prompt = f"рдПрдХ рдХрд┐рд╕рд╛рди рдХреА рднрд╛рд╖рд╛ рдореЗрдВ, рд╣рд┐рдВрджреА рдореЗрдВ рдЙрддреНрддрд░ рджреЛ:\n{question}"
    response = model.generate_content(prompt)
    return response.text.strip()

# ЁЯОЩя╕П Convert Hindi speech to text
def listen_hindi():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)
        st.info("ЁЯОд рдХреГрдкрдпрд╛ рдмреЛрд▓рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ...")
        audio = recognizer.listen(source)
        try:
            text = recognizer.recognize_google(audio, language='hi-IN')
            return text
        except sr.UnknownValueError:
            return "тЭМ рдЖрд╡рд╛рдЬрд╝ рд╕рдордЭ рдирд╣реАрдВ рдЖрдИ"
        except sr.RequestError:
            return "тЭМ рд╕реНрдкреАрдЪ рд╕рд░реНрд╡рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ"

import streamlit as st

# ЁЯМ╛ Streamlit App Config
st.set_page_config(page_title="AgriBot (рд╕рд╛рд░рдереА рдмреЙрдЯ)", page_icon="ЁЯМ╛")

# тЬи Clean White Theme CSS
st.markdown("""
    <style>
        body {
            background-color: #ffffff;
        }
        .big-title {
            font-size: 36px;
            font-weight: 700;
            color: #F5E8C7;
            margin-top: 10px;
        }
        .subheading {
            font-size: 24px;
            font-weight: 500;
            color: #555555;
            margin-bottom: 20px;
        }
        .question {
            font-size: 20px;
            line-height: 1.6;
            color: #2c3e50;
            background-color: #f2f4f5;
            padding: 15px;
            border-radius: 8px;
            margin-top: 10px;
            border-left: 4px solid #3498db;
        }
        .answer {
            font-size: 20px;
            line-height: 1.6;
            color: #2c3e50;
            background-color: #f2f4f5;
            padding: 15px;
            border-radius: 8px;
            margin-top: 10px;
            border-left: 4px solid #3498db;
        }
         .stButton>button {
            background-color: #3498db;
            color: white;
            border-radius: 8px;
            padding: 14px 30px;
            font-size: 24px;
            font-weight: 900;
            border: none;
        }
        .stButton>button:hover {
            background-color: #3498db;
        }
        
    </style>
""", unsafe_allow_html=True)

# ЁЯМ┐ App Title and Description
st.markdown('<div class="big-title">ЁЯМ╛ рд╕рд╛рд░рдереА-AI</div>', unsafe_allow_html=True)
st.markdown('<div class="subheading">ЁЯОд рдорд╛рдЗрдХ рд╕реЗ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ рдФрд░ рдЯреЗрдХреНрд╕реНрдЯ рдореЗрдВ рдЙрддреНрддрд░ рдкрд╛рдПрдВ</div>', unsafe_allow_html=True)

# ЁЯОЩя╕П Speech Input Button
if st.button("ЁЯОЩя╕П рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ"):
    user_question = listen_hindi()
    st.markdown(f'<div class="question">тЭУрд╕рд╡рд╛рд▓: {user_question}</div>', unsafe_allow_html=True)

    if "тЭМ" not in user_question:
        with st.spinner("ЁЯдЦ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдЙрддреНрддрд░ рд▓рд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ..."):
            answer = ask_gemini(user_question)
            st.write("")
            st.write("")
            st.success("тЬЕ рдЙрддреНрддрд░:")
            st.write("")
            st.markdown(f'<div class="answer">ЁЯТм {answer}</div>', unsafe_allow_html=True)
    else:
        st.error("тЪая╕П рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред")
